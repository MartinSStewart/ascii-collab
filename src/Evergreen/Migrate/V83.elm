module Evergreen.Migrate.V83 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V81.Ascii
import Evergreen.V81.Bounds
import Evergreen.V81.Change
import Evergreen.V81.Cursor
import Evergreen.V81.Geometry.Types
import Evergreen.V81.Grid
import Evergreen.V81.GridCell
import Evergreen.V81.Helper
import Evergreen.V81.LocalGrid
import Evergreen.V81.LocalModel
import Evergreen.V81.NotifyMe
import Evergreen.V81.Point2d
import Evergreen.V81.Types
import Evergreen.V81.Units
import Evergreen.V81.User
import Evergreen.V83.Ascii
import Evergreen.V83.Bounds
import Evergreen.V83.Change
import Evergreen.V83.Cursor
import Evergreen.V83.Geometry.Types
import Evergreen.V83.Grid
import Evergreen.V83.GridCell
import Evergreen.V83.Helper
import Evergreen.V83.LocalGrid
import Evergreen.V83.LocalModel
import Evergreen.V83.NotifyMe
import Evergreen.V83.Point2d
import Evergreen.V83.Types
import Evergreen.V83.Units
import Evergreen.V83.User
import Lamdera.Migrations exposing (..)
import List
import List.Nonempty
import Maybe
import Quantity
import SeqSet


frontendModel : Evergreen.V81.Types.FrontendModel -> ModelMigration Evergreen.V83.Types.FrontendModel Evergreen.V83.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V81.Types.BackendModel -> ModelMigration Evergreen.V83.Types.BackendModel Evergreen.V83.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V81.Types.FrontendMsg -> MsgMigration Evergreen.V83.Types.FrontendMsg Evergreen.V83.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V81.Types.ToBackend -> MsgMigration Evergreen.V83.Types.ToBackend Evergreen.V83.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V81.Types.BackendMsg -> MsgMigration Evergreen.V83.Types.BackendMsg Evergreen.V83.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V81.Types.ToFrontend -> MsgMigration Evergreen.V83.Types.ToFrontend Evergreen.V83.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Ascii_Ascii : Evergreen.V81.Ascii.Ascii -> Evergreen.V83.Ascii.Ascii
migrate_Ascii_Ascii old =
    case old of
        Evergreen.V81.Ascii.Ascii p0 ->
            Evergreen.V83.Ascii.Ascii p0


migrate_Bounds_Bounds : (unit_old -> unit_new) -> Evergreen.V81.Bounds.Bounds unit_old -> Evergreen.V83.Bounds.Bounds unit_new
migrate_Bounds_Bounds migrate_unit old =
    case old of
        Evergreen.V81.Bounds.Bounds p0 ->
            Evergreen.V83.Bounds.Bounds
                { min = p0.min |> migrate_Helper_Coord migrate_unit
                , max = p0.max |> migrate_Helper_Coord migrate_unit
                }


migrate_Change_Change : Evergreen.V81.Change.Change -> Evergreen.V83.Change.Change
migrate_Change_Change old =
    case old of
        Evergreen.V81.Change.LocalChange p0 ->
            Evergreen.V83.Change.LocalChange (p0 |> migrate_Change_LocalChange)

        Evergreen.V81.Change.ServerChange p0 ->
            Evergreen.V83.Change.ServerChange (p0 |> migrate_Change_ServerChange)

        Evergreen.V81.Change.ClientChange p0 ->
            Evergreen.V83.Change.ClientChange (p0 |> migrate_Change_ClientChange)


migrate_Change_ClientChange : Evergreen.V81.Change.ClientChange -> Evergreen.V83.Change.ClientChange
migrate_Change_ClientChange old =
    case old of
        Evergreen.V81.Change.ViewBoundsChange p0 p1 ->
            Evergreen.V83.Change.ViewBoundsChange (p0 |> migrate_Bounds_Bounds migrate_Units_CellUnit)
                (p1 |> List.map (Tuple.mapBoth (migrate_Helper_Coord migrate_Units_CellUnit) migrate_GridCell_Cell))


migrate_Change_LocalChange : Evergreen.V81.Change.LocalChange -> Evergreen.V83.Change.LocalChange
migrate_Change_LocalChange old =
    case old of
        Evergreen.V81.Change.LocalGridChange p0 ->
            Evergreen.V83.Change.LocalGridChange (p0 |> migrate_Grid_LocalGridChange)

        Evergreen.V81.Change.LocalUndo ->
            Evergreen.V83.Change.LocalUndo

        Evergreen.V81.Change.LocalRedo ->
            Evergreen.V83.Change.LocalRedo

        Evergreen.V81.Change.LocalAddUndo ->
            Evergreen.V83.Change.LocalAddUndo

        Evergreen.V81.Change.LocalHideUser p0 p1 ->
            Evergreen.V83.Change.LocalHideUser (p0 |> migrate_User_UserId)
                (p1 |> migrate_Helper_Coord migrate_Units_AsciiUnit)

        Evergreen.V81.Change.LocalUnhideUser p0 ->
            Evergreen.V83.Change.LocalUnhideUser (p0 |> migrate_User_UserId)

        Evergreen.V81.Change.LocalToggleUserVisibilityForAll p0 ->
            Evergreen.V83.Change.LocalToggleUserVisibilityForAll (p0 |> migrate_User_UserId)


migrate_Change_ServerChange : Evergreen.V81.Change.ServerChange -> Evergreen.V83.Change.ServerChange
migrate_Change_ServerChange old =
    case old of
        Evergreen.V81.Change.ServerGridChange p0 ->
            Evergreen.V83.Change.ServerGridChange (p0 |> migrate_Grid_GridChange)

        Evergreen.V81.Change.ServerUndoPoint p0 ->
            Evergreen.V83.Change.ServerUndoPoint
                { userId = p0.userId |> migrate_User_UserId
                , undoPoints = p0.undoPoints
                }

        Evergreen.V81.Change.ServerToggleUserVisibilityForAll p0 ->
            Evergreen.V83.Change.ServerToggleUserVisibilityForAll (p0 |> migrate_User_UserId)


migrate_Cursor_Cursor : Evergreen.V81.Cursor.Cursor -> Evergreen.V83.Cursor.Cursor
migrate_Cursor_Cursor old =
    case old of
        Evergreen.V81.Cursor.Cursor p0 ->
            Evergreen.V83.Cursor.Cursor
                { position = p0.position |> migrate_Helper_Coord migrate_Units_AsciiUnit
                , startingColumn = p0.startingColumn |> migrate_Quantity_Quantity
                , size = p0.size |> migrate_Helper_Coord migrate_Units_AsciiUnit
                }


migrate_Geometry_Types_Point2d : Evergreen.V81.Geometry.Types.Point2d units_old coordinates_old -> Evergreen.V83.Geometry.Types.Point2d units_new coordinates_new
migrate_Geometry_Types_Point2d old =
    case old of
        Evergreen.V81.Geometry.Types.Point2d p0 ->
            Evergreen.V83.Geometry.Types.Point2d p0


migrate_GridCell_Cell : Evergreen.V81.GridCell.Cell -> Evergreen.V83.GridCell.Cell
migrate_GridCell_Cell old =
    case old of
        Evergreen.V81.GridCell.Cell p0 ->
            Evergreen.V83.GridCell.Cell
                { history =
                    p0.history
                        |> List.map
                            (\rec1 ->
                                { userId = rec1.userId |> migrate_User_UserId
                                , position = rec1.position
                                , line = rec1.line |> migrate_List_Nonempty_Nonempty migrate_Ascii_Ascii
                                }
                            )
                , undoPoint = p0.undoPoint
                }


migrate_Grid_Grid : Evergreen.V81.Grid.Grid -> Evergreen.V83.Grid.Grid
migrate_Grid_Grid old =
    case old of
        Evergreen.V81.Grid.Grid p0 ->
            Evergreen.V83.Grid.Grid (p0 |> Dict.map (\k -> migrate_GridCell_Cell))


migrate_Grid_GridChange : Evergreen.V81.Grid.GridChange -> Evergreen.V83.Grid.GridChange
migrate_Grid_GridChange old =
    { cellPosition = old.cellPosition |> migrate_Helper_Coord migrate_Units_CellUnit
    , localPosition = old.localPosition
    , change = old.change |> migrate_List_Nonempty_Nonempty migrate_Ascii_Ascii
    , userId = old.userId |> migrate_User_UserId
    }


migrate_Grid_LocalGridChange : Evergreen.V81.Grid.LocalGridChange -> Evergreen.V83.Grid.LocalGridChange
migrate_Grid_LocalGridChange old =
    { cellPosition = old.cellPosition |> migrate_Helper_Coord migrate_Units_CellUnit
    , localPosition = old.localPosition
    , change = old.change |> migrate_List_Nonempty_Nonempty migrate_Ascii_Ascii
    }


migrate_Helper_Coord : (units_old -> units_new) -> Evergreen.V81.Helper.Coord units_old -> Evergreen.V83.Helper.Coord units_new
migrate_Helper_Coord migrate_units old =
    old |> Tuple.mapBoth migrate_Quantity_Quantity migrate_Quantity_Quantity


migrate_List_Nonempty_Nonempty : (a_old -> a_new) -> List.Nonempty.Nonempty a_old -> List.Nonempty.Nonempty a_new
migrate_List_Nonempty_Nonempty migrate_a old =
    old |> List.Nonempty.map migrate_a


migrate_LocalGrid_LocalGrid : Evergreen.V81.LocalGrid.LocalGrid -> Evergreen.V83.LocalGrid.LocalGrid
migrate_LocalGrid_LocalGrid old =
    case old of
        Evergreen.V81.LocalGrid.LocalGrid p0 ->
            Evergreen.V83.LocalGrid.LocalGrid (p0 |> migrate_LocalGrid_LocalGrid_)


migrate_LocalGrid_LocalGrid_ : Evergreen.V81.LocalGrid.LocalGrid_ -> Evergreen.V83.LocalGrid.LocalGrid_
migrate_LocalGrid_LocalGrid_ old =
    { grid = old.grid |> migrate_Grid_Grid
    , undoHistory = old.undoHistory
    , redoHistory = old.redoHistory
    , user = old.user |> migrate_User_UserId
    , hiddenUsers = old.hiddenUsers |> SeqSet.map migrate_User_UserId
    , adminHiddenUsers = old.adminHiddenUsers |> SeqSet.map migrate_User_UserId
    , viewBounds = old.viewBounds |> migrate_Bounds_Bounds migrate_Units_CellUnit
    , undoCurrent = old.undoCurrent
    }


migrate_LocalModel_LocalModel : (msg_old -> msg_new) -> (model_old -> model_new) -> Evergreen.V81.LocalModel.LocalModel msg_old model_old -> Evergreen.V83.LocalModel.LocalModel msg_new model_new
migrate_LocalModel_LocalModel migrate_msg migrate_model old =
    case old of
        Evergreen.V81.LocalModel.LocalModel p0 ->
            Evergreen.V83.LocalModel.LocalModel
                { localMsgs = p0.localMsgs |> List.map (Tuple.mapSecond migrate_msg)
                , localModel = p0.localModel |> migrate_model
                , model = p0.model |> migrate_model
                }


migrate_NotifyMe_Frequency : Evergreen.V81.NotifyMe.Frequency -> Evergreen.V83.NotifyMe.Frequency
migrate_NotifyMe_Frequency old =
    case old of
        Evergreen.V81.NotifyMe.Every3Hours ->
            Evergreen.V83.NotifyMe.Every3Hours

        Evergreen.V81.NotifyMe.Every12Hours ->
            Evergreen.V83.NotifyMe.Every12Hours

        Evergreen.V81.NotifyMe.Daily ->
            Evergreen.V83.NotifyMe.Daily

        Evergreen.V81.NotifyMe.Weekly ->
            Evergreen.V83.NotifyMe.Weekly

        Evergreen.V81.NotifyMe.Monthly ->
            Evergreen.V83.NotifyMe.Monthly


migrate_NotifyMe_InProgressModel : Evergreen.V81.NotifyMe.InProgressModel -> Evergreen.V83.NotifyMe.InProgressModel
migrate_NotifyMe_InProgressModel old =
    { status = old.status |> migrate_NotifyMe_Status
    , email = old.email
    , frequency = old.frequency |> Maybe.map migrate_NotifyMe_Frequency
    }


migrate_NotifyMe_Model : Evergreen.V81.NotifyMe.Model -> Evergreen.V83.NotifyMe.Model
migrate_NotifyMe_Model old =
    case old of
        Evergreen.V81.NotifyMe.InProgress p0 ->
            Evergreen.V83.NotifyMe.InProgress (p0 |> migrate_NotifyMe_InProgressModel)

        Evergreen.V81.NotifyMe.Completed ->
            Evergreen.V83.NotifyMe.Completed

        Evergreen.V81.NotifyMe.BackendError ->
            Evergreen.V83.NotifyMe.BackendError

        Evergreen.V81.NotifyMe.Unsubscribing ->
            Evergreen.V83.NotifyMe.Unsubscribing

        Evergreen.V81.NotifyMe.Unsubscribed ->
            Evergreen.V83.NotifyMe.Unsubscribed


migrate_NotifyMe_Status : Evergreen.V81.NotifyMe.Status -> Evergreen.V83.NotifyMe.Status
migrate_NotifyMe_Status old =
    case old of
        Evergreen.V81.NotifyMe.Form ->
            Evergreen.V83.NotifyMe.Form

        Evergreen.V81.NotifyMe.FormWithError ->
            Evergreen.V83.NotifyMe.FormWithError

        Evergreen.V81.NotifyMe.SendingToBackend ->
            Evergreen.V83.NotifyMe.SendingToBackend

        Evergreen.V81.NotifyMe.WaitingOnConfirmation ->
            Evergreen.V83.NotifyMe.WaitingOnConfirmation


migrate_Point2d_Point2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V81.Point2d.Point2d units_old coordinates_old -> Evergreen.V83.Point2d.Point2d units_new coordinates_new
migrate_Point2d_Point2d migrate_units migrate_coordinates old =
    old |> migrate_Geometry_Types_Point2d


migrate_Quantity_Quantity : Quantity.Quantity number units -> Quantity.Quantity number units2
migrate_Quantity_Quantity old =
    Quantity.unwrap old |> Quantity.unsafe


migrate_Types_FrontendLoaded : Evergreen.V81.Types.FrontendLoaded -> Evergreen.V83.Types.FrontendLoaded
migrate_Types_FrontendLoaded old =
    { key = old.key
    , localModel = old.localModel |> migrate_LocalModel_LocalModel migrate_Change_Change migrate_LocalGrid_LocalGrid
    , meshes = old.meshes
    , cursorMesh = old.cursorMesh
    , viewPoint = old.viewPoint |> migrate_Point2d_Point2d migrate_Units_WorldPixel migrate_Units_WorldCoordinate
    , viewPointLastInterval = old.viewPointLastInterval |> migrate_Point2d_Point2d migrate_Units_WorldPixel migrate_Units_WorldCoordinate
    , cursor = old.cursor |> migrate_Cursor_Cursor
    , texture = old.texture
    , pressedKeys = old.pressedKeys
    , windowSize = old.windowSize
    , devicePixelRatio = old.devicePixelRatio |> migrate_Quantity_Quantity
    , zoomFactor = old.zoomFactor
    , mouseLeft = old.mouseLeft |> migrate_Types_MouseButtonState
    , lastMouseLeftUp = old.lastMouseLeftUp |> Maybe.map (Tuple.mapSecond (migrate_Point2d_Point2d identity migrate_Units_ScreenCoordinate))
    , mouseMiddle = old.mouseMiddle |> migrate_Types_MouseButtonState
    , pendingChanges = old.pendingChanges |> List.map migrate_Change_LocalChange
    , tool = old.tool |> migrate_Types_ToolType
    , undoAddLast = old.undoAddLast
    , time = old.time
    , lastTouchMove = old.lastTouchMove
    , userHoverHighlighted = old.userHoverHighlighted |> Maybe.map migrate_User_UserId
    , highlightContextMenu =
        old.highlightContextMenu
            |> Maybe.map
                (\rec ->
                    { userId = rec.userId |> migrate_User_UserId
                    , hidePoint = rec.hidePoint |> migrate_Helper_Coord migrate_Units_AsciiUnit
                    }
                )
    , adminEnabled = old.adminEnabled
    , animationElapsedTime = old.animationElapsedTime
    , ignoreNextUrlChanged = old.ignoreNextUrlChanged
    , showNotifyMe = old.showNotifyMe
    , notifyMeModel = old.notifyMeModel |> migrate_NotifyMe_Model
    , textAreaText = old.textAreaText
    , backendImported = Evergreen.V83.Types.NotImported
    }


migrate_Types_FrontendLoading : Evergreen.V81.Types.FrontendLoading -> Evergreen.V83.Types.FrontendLoading
migrate_Types_FrontendLoading old =
    { key = old.key
    , windowSize = old.windowSize
    , devicePixelRatio = old.devicePixelRatio |> migrate_Quantity_Quantity
    , zoomFactor = old.zoomFactor
    , time = old.time
    , viewPoint = old.viewPoint |> migrate_Helper_Coord migrate_Units_AsciiUnit
    , mousePosition = old.mousePosition |> migrate_Point2d_Point2d identity migrate_Units_ScreenCoordinate
    , showNotifyMe = old.showNotifyMe
    , notifyMeModel = old.notifyMeModel |> migrate_NotifyMe_Model
    }


migrate_Types_FrontendModel : Evergreen.V81.Types.FrontendModel -> Evergreen.V83.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V81.Types.Loading p0 ->
            Evergreen.V83.Types.Loading (p0 |> migrate_Types_FrontendLoading)

        Evergreen.V81.Types.Loaded p0 ->
            Evergreen.V83.Types.Loaded (p0 |> migrate_Types_FrontendLoaded)


migrate_Types_MouseButtonState : Evergreen.V81.Types.MouseButtonState -> Evergreen.V83.Types.MouseButtonState
migrate_Types_MouseButtonState old =
    case old of
        Evergreen.V81.Types.MouseButtonUp p0 ->
            Evergreen.V83.Types.MouseButtonUp
                { current = p0.current |> migrate_Point2d_Point2d identity migrate_Units_ScreenCoordinate
                }

        Evergreen.V81.Types.MouseButtonDown p0 ->
            Evergreen.V83.Types.MouseButtonDown
                { start = p0.start |> migrate_Point2d_Point2d identity migrate_Units_ScreenCoordinate
                , start_ = p0.start_ |> migrate_Point2d_Point2d migrate_Units_WorldPixel migrate_Units_WorldCoordinate
                , current = p0.current |> migrate_Point2d_Point2d identity migrate_Units_ScreenCoordinate
                }


migrate_Types_ToolType : Evergreen.V81.Types.ToolType -> Evergreen.V83.Types.ToolType
migrate_Types_ToolType old =
    case old of
        Evergreen.V81.Types.DragTool ->
            Evergreen.V83.Types.DragTool

        Evergreen.V81.Types.SelectTool ->
            Evergreen.V83.Types.SelectTool

        Evergreen.V81.Types.HighlightTool p0 ->
            Evergreen.V83.Types.HighlightTool (p0 |> Maybe.map (Tuple.mapBoth migrate_User_UserId (migrate_Helper_Coord migrate_Units_AsciiUnit)))


migrate_Units_AsciiUnit : Evergreen.V81.Units.AsciiUnit -> Evergreen.V83.Units.AsciiUnit
migrate_Units_AsciiUnit old =
    case old of
        Evergreen.V81.Units.AsciiUnit p0 ->
            Evergreen.V83.Units.AsciiUnit p0


migrate_Units_CellUnit : Evergreen.V81.Units.CellUnit -> Evergreen.V83.Units.CellUnit
migrate_Units_CellUnit old =
    case old of
        Evergreen.V81.Units.CellUnit p0 ->
            Evergreen.V83.Units.CellUnit p0


migrate_Units_ScreenCoordinate : Evergreen.V81.Units.ScreenCoordinate -> Evergreen.V83.Units.ScreenCoordinate
migrate_Units_ScreenCoordinate old =
    case old of
        Evergreen.V81.Units.ScreenCoordinate p0 ->
            Evergreen.V83.Units.ScreenCoordinate p0


migrate_Units_WorldCoordinate : Evergreen.V81.Units.WorldCoordinate -> Evergreen.V83.Units.WorldCoordinate
migrate_Units_WorldCoordinate old =
    case old of
        Evergreen.V81.Units.WorldCoordinate p0 ->
            Evergreen.V83.Units.WorldCoordinate p0


migrate_Units_WorldPixel : Evergreen.V81.Units.WorldPixel -> Evergreen.V83.Units.WorldPixel
migrate_Units_WorldPixel old =
    case old of
        Evergreen.V81.Units.WorldPixel p0 ->
            Evergreen.V83.Units.WorldPixel p0


migrate_User_UserId : Evergreen.V81.User.UserId -> Evergreen.V83.User.UserId
migrate_User_UserId old =
    case old of
        Evergreen.V81.User.UserId p0 ->
            Evergreen.V83.User.UserId p0
